[
["index.html", "Multivariate Stats 1 Lesson 2 1.1 Variance and Corrected Variance 1.2 Exercises", " Multivariate Stats Tiago dos Santos 2018-10-01 1 Lesson 2 1.1 Variance and Corrected Variance 1.1.1 Variance \\[ S_{n}^2 = \\frac{1}{N}\\sum\\limits_{i=1}^{N}(X_{i} - \\overline{X})^2 \\] \\[ S_{n}^2 = \\frac{1}{N}\\sum\\limits_{i=1}^{N}(X_{i} - \\overline{X})(X_{i} - \\overline{X}) \\] 1.1.2 Corrected Variance \\[ S_{n-1}^2 = \\frac{1}{n}\\sum\\limits_{i=1}^{n-1}(X_{i} - \\overline{X})^2 \\] \\[ S_{n-1}^2 = \\frac{1}{n}\\sum\\limits_{i=1}^{n-1}(X_{i} - \\overline{X})(X_{i} - \\overline{X}) \\] 1.1.3 Covariance \\[Cov(x,y) = \\frac{1}{n-1}\\sum\\limits_{i=1}^{n}(x_{i} - \\overline{x})(y_{i} - \\overline{y}) \\] \\[Cov(x,y) = Cov(y,x) \\] 1.1.4 Pearson Correlation Coefficient \\[r_{xy} = \\frac{Cov(x,y)}{\\sqrt{S_{x}^2 \\times S_{y}^2}}\\] The domain of this coefficient is [-1, 1] \\[ \\Sigma = V^{\\frac{1}{2}} \\] 1.2 Exercises X = matrix(c(42,52,48,58,4,5,4,3),4) XMeans &lt;- apply(X, 2, mean) XVars &lt;- var(X) Xcor &lt;- cor(X) dados &lt;- as.data.frame(readxl::read_xlsx(file.path(datasetsDir,&quot;data1.xlsx&quot;))) aplpack::faces(HSAUR3::USairpollution[1:9,], print.info = F) ## Warning in fun(libname, pkgname): couldn&#39;t connect to display &quot;:0&quot; meanVector &lt;- c(5,10) Sigma &lt;- matrix(c(9,16,16,64),2) Sigma.eigen &lt;- eigen(Sigma) The eigen values are 68.3158765, 4.6841235 TO obtain the ellipse containing 95% of the population, we must calculate \\[(x-\\mu)&#39; \\times \\Sigma^{-1} \\times (x-\\mu)&#39; &lt;= \\chi^2_{(2)0.95}\\] "],
["lesson-3.html", "2 Lesson 3", " 2 Lesson 3 dados2 &lt;- as.data.frame(readxl::read_xlsx(file.path(datasetsDir, &quot;data2.xlsx&quot;))) s &lt;- seq(min(dados2$imc),max(dados2$imc), length.out = length(dados2$imc)) hist( dados2$imc, probability = T, xlim=c(min(dados2$imc),max(dados2$imc)), main=NULL, xlab=NULL) lines(s,dnorm(s,mean(dados2$imc),sd(dados2$imc))) plot(density(dados2[,1]),ylim=c(0,0.3),main = &quot; &quot;,ylab = &quot;Densidade&quot;) lines(density(dados2[,1],bw = 0.3),col=&quot;red&quot;) lines(density(dados2[,1],bw = 0.1),col=&quot;blue&quot;) legend(&quot;topright&quot;,col=c(1,2,4),lty=1,legend = c(&quot;bw=default&quot;,&quot;bw=0.3&quot;,&quot;bw=0.1&quot;)) plot(density(dados2[,1]),ylim=c(0,0.3),main = &quot; &quot;,ylab = &quot;Densidade&quot;) lines(density(dados2[,1],kernel = &quot;rectangular&quot;),col=&quot;red&quot;) lines(density(dados2[,1],kernel = &quot;epanechnikov&quot;),col=&quot;blue&quot;) legend(&quot;topright&quot;,col=c(1,2,4),lty=1,legend = c(&quot;default&quot;,&quot;rectangular&quot;,&quot;epanechnikov&quot;)) dados1 &lt;- as.data.frame(readxl::read_xlsx(file.path(datasetsDir, &quot;data1.xlsx&quot;), col_names = F)) par(mfrow=c(3,2)) plots &lt;- apply(dados1,2,function(iVar){ s &lt;- seq(min(iVar),max(iVar), length.out = length(iVar)) hist( iVar, probability = T, xlim=c(min(iVar),max(iVar)), main=NULL, xlab=NULL) lines(s,dnorm(s,mean(iVar),sd(iVar)),col=&quot;red&quot;) lines(density(iVar,kernel = &quot;rectangular&quot;),col=&quot;blue&quot;) legend(&quot;topright&quot;,col=c(1,2,4),lty=1,legend = c(&quot;histogram&quot;,&quot;dnorm&quot;,&quot;gaussian&quot;)) }) par(mfrow=c(1,1)) 2.0.1 Estatísticas Ordinais 2.0.1.1 Minimum \\[ x_\\left(1\\right) = x_\\left(1n\\right) \\] 2.0.1.2 Maximum \\[ x_\\left(n\\right) = x_\\left(nn\\right) \\] 2.0.1.3 Inverso da função distribuição Gaussiana qnorm(0.975) ## [1] 1.959964 2.0.1.4 QQ Plot x &lt;- c(-1.00,-0.10,0.16,0.41,0.62,0.80,1.26,1.54,1.71,2.3) xdf &lt;- as.data.frame(x) names(xdf) &lt;- c(&quot;values&quot;) nLength &lt;- length(xdf$values) xdf$empProb &lt;- sapply(1:nLength,function(idx){ (idx-0.5)/nLength }) xdf$theoreticProb &lt;- sapply(xdf$empProb,function(quantile){ qnorm(quantile) }) knitr::kable(xdf) values empProb theoreticProb -1.00 0.05 -1.6448536 -0.10 0.15 -1.0364334 0.16 0.25 -0.6744898 0.41 0.35 -0.3853205 0.62 0.45 -0.1256613 0.80 0.55 0.1256613 1.26 0.65 0.3853205 1.54 0.75 0.6744898 1.71 0.85 1.0364334 2.30 0.95 1.6448536 plot(xdf$empProb , xdf$theoreticProb ) car::qqp(x,distribution=&quot;norm&quot;) ## [1] 1 10 defaultMar &lt;- c(5, 4, 4, 2) + 0.1 par(mfrow=c(3,2),mar=c(0,0,0,0)) plots &lt;- apply(dados1,2,function(iVar){ car::qqp(iVar,distribution=&quot;norm&quot;) }) par(mfrow=c(1,1),defaultMar) 2.0.2 Transforming to Distance (slide 21) x1 &lt;- c(126974,96933,86656,63438,55264,50976,39069,36156,35209,32416) x2 &lt;- c(4224,3835,3510,3758,3939,1809,2946, 359,2480,2413) X &lt;- matrix(c(x1,x2),10,2) mx &lt;- colMeans(X) S &lt;- var(x) d2 &lt;- c() distanceCsquare &lt;- function(){ el - mean } for(i in 1:nrow(X)){ d2[i] &lt;- (t(X[i,]) - colMeans(X))%*%solve(var(X))%*%(X[i,]-colMeans(X)) } ## o u é que tem distribuição beta ## quantis teoriocos qui-quadrado qi_chi &lt;- round(qchisq(xdf$empProb, ncol(X)),3) qi_chi ## [1] 0.103 0.325 0.575 0.862 1.196 1.597 2.100 2.773 3.794 5.991 xdf$theoreticProbQuiSq &lt;- qi_chi ## quantis teoricos de beta qi_beta &lt;- round(qbeta(xdf$empProb, shape1 = ncol(X)/2, shape2=(nrow(X)-ncol(X)-1)/2),3) qi_beta ## [1] 0.015 0.045 0.079 0.116 0.157 0.204 0.259 0.327 0.418 0.575 xdf$theoreticProbQuiSq &lt;- qi_beta ## aqui deveria ser u em vez de d2 par(mfrow=c(1,2)) plot(xdf$theoreticProbQuiSq, d2) car::qqp(d2,distribution=&quot;chisq&quot;,df=ncol(X)) ## [1] 8 1 hypothesisVal &lt;- c(11,3) X &lt;- matrix(c(6,10,8,9,6,3),3) Xmeans &lt;- colMeans(X) S &lt;- var(X) Sminus1 &lt;- solve(S) t(nrow(X)*(Xmeans - hypothesisVal))%*%Sminus1%*%(Xmeans - hypothesisVal) ## [,1] ## [1,] 7 "],
["studies-experiments.html", "3 Studies &amp; Experiments 3.1 Matrixes’ Span and Determinantes", " 3 Studies &amp; Experiments Unfortunately, no one can be told what the Matrix is. You have to see it for yourself - Morpheys 3.1 Matrixes’ Span and Determinantes matrixA2d &lt;- matrix(c(1,0,0,1),2) matrixA2d ## [,1] [,2] ## [1,] 1 0 ## [2,] 0 1 drawMatrixWithDet(matrixA2d,dim(matrixA2d)[1]) ## Warning: package &#39;bindrcpp&#39; was built under R version 3.4.4 matrixB2d &lt;- matrix(c(1,3,0,1),2) matrixB2d ## [,1] [,2] ## [1,] 1 0 ## [2,] 3 1 drawMatrixWithDet(matrixB2d,dim(matrixB2d)[1]) matrixA &lt;- matrix(c(1,0,0,0,1,0,0,0,1),3) matrixA ## [,1] [,2] [,3] ## [1,] 1 0 0 ## [2,] 0 1 0 ## [3,] 0 0 1 drawMatrixWithDet(matrixA,dim(matrixA)[1]) ## Warning: &#39;mesh3d&#39; objects don&#39;t have these attributes: &#39;mode&#39;, &#39;line&#39; ## Valid attributes include: ## &#39;type&#39;, &#39;visible&#39;, &#39;showlegend&#39;, &#39;legendgroup&#39;, &#39;opacity&#39;, &#39;name&#39;, &#39;uid&#39;, &#39;ids&#39;, &#39;customdata&#39;, &#39;selectedpoints&#39;, &#39;hoverinfo&#39;, &#39;hoverlabel&#39;, &#39;stream&#39;, &#39;transforms&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;text&#39;, &#39;delaunayaxis&#39;, &#39;alphahull&#39;, &#39;intensity&#39;, &#39;color&#39;, &#39;vertexcolor&#39;, &#39;facecolor&#39;, &#39;cauto&#39;, &#39;cmin&#39;, &#39;cmax&#39;, &#39;colorscale&#39;, &#39;autocolorscale&#39;, &#39;reversescale&#39;, &#39;showscale&#39;, &#39;colorbar&#39;, &#39;flatshading&#39;, &#39;contour&#39;, &#39;lightposition&#39;, &#39;lighting&#39;, &#39;xcalendar&#39;, &#39;ycalendar&#39;, &#39;zcalendar&#39;, &#39;scene&#39;, &#39;idssrc&#39;, &#39;customdatasrc&#39;, &#39;hoverinfosrc&#39;, &#39;xsrc&#39;, &#39;ysrc&#39;, &#39;zsrc&#39;, &#39;isrc&#39;, &#39;jsrc&#39;, &#39;ksrc&#39;, &#39;textsrc&#39;, &#39;intensitysrc&#39;, &#39;vertexcolorsrc&#39;, &#39;facecolorsrc&#39;, &#39;key&#39;, &#39;set&#39;, &#39;frame&#39;, &#39;transforms&#39;, &#39;_isNestedKey&#39;, &#39;_isSimpleKey&#39;, &#39;_isGraticule&#39;, &#39;_bbox&#39; matrixB &lt;- matrix(c(1,2,3,2,2,1,3,2,4),3) matrixB ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 2 2 2 ## [3,] 3 1 4 drawMatrixWithDet(matrixB,dim(matrixB)[1]) ## Warning: &#39;mesh3d&#39; objects don&#39;t have these attributes: &#39;mode&#39;, &#39;line&#39; ## Valid attributes include: ## &#39;type&#39;, &#39;visible&#39;, &#39;showlegend&#39;, &#39;legendgroup&#39;, &#39;opacity&#39;, &#39;name&#39;, &#39;uid&#39;, &#39;ids&#39;, &#39;customdata&#39;, &#39;selectedpoints&#39;, &#39;hoverinfo&#39;, &#39;hoverlabel&#39;, &#39;stream&#39;, &#39;transforms&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;text&#39;, &#39;delaunayaxis&#39;, &#39;alphahull&#39;, &#39;intensity&#39;, &#39;color&#39;, &#39;vertexcolor&#39;, &#39;facecolor&#39;, &#39;cauto&#39;, &#39;cmin&#39;, &#39;cmax&#39;, &#39;colorscale&#39;, &#39;autocolorscale&#39;, &#39;reversescale&#39;, &#39;showscale&#39;, &#39;colorbar&#39;, &#39;flatshading&#39;, &#39;contour&#39;, &#39;lightposition&#39;, &#39;lighting&#39;, &#39;xcalendar&#39;, &#39;ycalendar&#39;, &#39;zcalendar&#39;, &#39;scene&#39;, &#39;idssrc&#39;, &#39;customdatasrc&#39;, &#39;hoverinfosrc&#39;, &#39;xsrc&#39;, &#39;ysrc&#39;, &#39;zsrc&#39;, &#39;isrc&#39;, &#39;jsrc&#39;, &#39;ksrc&#39;, &#39;textsrc&#39;, &#39;intensitysrc&#39;, &#39;vertexcolorsrc&#39;, &#39;facecolorsrc&#39;, &#39;key&#39;, &#39;set&#39;, &#39;frame&#39;, &#39;transforms&#39;, &#39;_isNestedKey&#39;, &#39;_isSimpleKey&#39;, &#39;_isGraticule&#39;, &#39;_bbox&#39; 3.1.1 More thatn 3D You have to let it all go, Neo. Fear, doubt, and disbelief. Free your mind Morpheus "],
["exercises-1.html", "4 Exercises", " 4 Exercises This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. "],
["exercise.html", "5 Exercise 5.1 Exercise 1 - Linear Algebra", " 5 Exercise 5.1 Exercise 1 - Linear Algebra 5.1.1 Ex 1 A = matrix(c(4,7,2,5,3,8),2) B = matrix(c(3,6,-2,9,4,-5),2) \\[ A + B = \\] A+B ## [,1] [,2] [,3] ## [1,] 7 0 7 ## [2,] 13 14 3 \\[ A - B = \\] A-B ## [,1] [,2] [,3] ## [1,] 1 4 -1 ## [2,] 1 -4 13 \\[ A&#39; \\times A = \\] t(A)%*%A ## [,1] [,2] [,3] ## [1,] 65 43 68 ## [2,] 43 29 46 ## [3,] 68 46 73 \\[ A \\times A&#39; = \\] A%*%t(A) ## [,1] [,2] ## [1,] 29 62 ## [2,] 62 138 5.1.2 Ex 2 A = matrix(c(1,2,3,-1),2) B = matrix(c(2,1,0,5),2) \\[ A \\times B = \\] A %*% B ## [,1] [,2] ## [1,] 5 15 ## [2,] 3 -5 \\[ B \\times A = \\] B %*% A ## [,1] [,2] ## [1,] 2 6 ## [2,] 11 -2 \\[ det(A \\times B) = \\] det(A %*% B ) ## [1] -70 \\[ det(A) = \\] det(A) ## [1] -7 \\[ det(B) = \\] det(B) ## [1] 10 5.1.3 Ex 3 A = matrix(c(1,2,5,2,4,10,3,6,15),3) B = matrix(c(-1,-1,1,1,1,-1,-2,-2,2),3) \\[ A \\times B = 0 \\] A %*% B ## [,1] [,2] [,3] ## [1,] 0 0 0 ## [2,] 0 0 0 ## [3,] 0 0 0 \\[ tr(A)\\] #tr(A) \\[ tr(B)\\] #tr(B) \\[ det(A)\\] det(A) ## [1] 0 1+1 "]
]
